From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Mon, 16 Sep 2019 14:48:09 -0700
Subject: [PATCH] Use distance map to optimise entity tracker

Now when updating entities, at most, we will only iterate over the
currently tracking players & any new tracking players (compared to
every player in the world...)

diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index fbac08c379659e2f38cb790d76f5428e8c92545f..5b7037a5ae5d1a7a1f7689812dee57092f070b77 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -70,6 +70,7 @@ public class EntityTrackerEntry {
         this.r = entity.onGround;
     }
 
+    public final void tick() { this.a(); } /* Concrete - OBFHELPER */
     public void a() {
         ca.spottedleaf.concrete.util.TickThread.softEnsureTickThread("Tracker update"); /* Concrete */
         List<Entity> list = this.tracker.getPassengers();
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index e5c03374f35b1fd17f43686afd1dc33a771b0fe8..e79cacd642446571f47cbd10eca3757486e950aa 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -109,6 +109,9 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     public final ca.spottedleaf.concrete.util.map.PlayerAreaMap playerViewDistanceMap;
     public final ca.spottedleaf.concrete.util.map.PlayerAreaMap playerMobSpawnRangeMap;
 
+    public final ca.spottedleaf.concrete.util.map.PlayerAreaMap entityTrackerTrackMap;
+    public final int maxEntityTrackRangeChunk;
+
     void addPlayerToDistanceMaps(EntityPlayer player) {
         try (co.aikar.timings.Timing ignored = this.world.timings.playerViewDistanceMapAdd.startTiming()) {
             this.updateMaps(player);
@@ -121,6 +124,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             if (this.playerMobSpawnRangeMap != null) {
                 this.playerMobSpawnRangeMap.remove(player);
             }
+            this.entityTrackerTrackMap.remove(player);
         }
     }
 
@@ -144,6 +148,8 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
             this.playerMobSpawnRangeMap.update(player, chunkX, chunkZ, chunkRange);
         }
+
+        this.entityTrackerTrackMap.update(player, chunkX, chunkZ, this.maxEntityTrackRangeChunk);
     }
     /* Concrete end */
 
@@ -183,6 +189,23 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         ca.spottedleaf.concrete.util.map.PooledLinkedHashSets<EntityPlayer> sets = new ca.spottedleaf.concrete.util.map.PooledLinkedHashSets<>();
         this.playerViewDistanceMap = new ca.spottedleaf.concrete.util.map.PlayerAreaMap(sets);
         this.playerMobSpawnRangeMap = ca.spottedleaf.concrete.config.ConcreteConfig.optimizeChunkRangeCheck ? new ca.spottedleaf.concrete.util.map.PlayerAreaMap(sets) : null;
+
+        int maxEntityTrackRangeBlock = this.world.spigotConfig.playerTrackingRange;
+        if (this.world.spigotConfig.animalTrackingRange > maxEntityTrackRangeBlock) {
+            maxEntityTrackRangeBlock = this.world.spigotConfig.animalTrackingRange;
+        }
+        if (this.world.spigotConfig.monsterTrackingRange > maxEntityTrackRangeBlock) {
+            maxEntityTrackRangeBlock = this.world.spigotConfig.monsterTrackingRange;
+        }
+        if (this.world.spigotConfig.miscTrackingRange > maxEntityTrackRangeBlock) {
+            maxEntityTrackRangeBlock = this.world.spigotConfig.miscTrackingRange;
+        }
+        if (this.world.spigotConfig.otherTrackingRange > maxEntityTrackRangeBlock) {
+            maxEntityTrackRangeBlock = this.world.spigotConfig.otherTrackingRange;
+        }
+        this.maxEntityTrackRangeChunk = (maxEntityTrackRangeBlock >> 4) + ((maxEntityTrackRangeBlock & 15) != 0 ? 2 : 1);
+
+        this.entityTrackerTrackMap = new ca.spottedleaf.concrete.util.map.PlayerAreaMap(sets);
         /* Concrete end - distance maps */
     }
 
@@ -1354,6 +1377,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
     public void movePlayer(EntityPlayer entityplayer) {
         this.updateDistanceMaps(entityplayer); /* Concrete - distance maps */
+        if (false) { /* Concrete - tracker optimization takes care of this */
         ObjectIterator objectiterator = this.trackedEntities.values().iterator();
 
         while (objectiterator.hasNext()) {
@@ -1365,6 +1389,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 playerchunkmap_entitytracker.updatePlayer(entityplayer);
             }
         }
+        } /* Concrete - tracker optimization takes care of this */
 
         int i = MathHelper.floor(entityplayer.locX) >> 4;
         int j = MathHelper.floor(entityplayer.locZ) >> 4;
@@ -1526,7 +1551,49 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         entity.tracker = null; // Paper - We're no longer tracked
     }
 
+    /* Concrete start - optimized entity tracker */
+    protected void modifiedTrackerUpdate() {
+        ca.spottedleaf.concrete.util.map.PlayerAreaMap trackMap = this.entityTrackerTrackMap;
+        for (EntityTracker trackedEntityTracker : this.trackedEntities.values()) {
+            Entity tracked = trackedEntityTracker.tracker;
+            //tracked.updateMappedChunk(); // not needed
+
+            world.timings.tracker1.startTiming(); // Paper
+            ca.spottedleaf.concrete.util.map.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> currTracked =
+                    trackMap.getObjectsInRange(ca.spottedleaf.concrete.util.Util.getChunkCoordinate(tracked.locX), ca.spottedleaf.concrete.util.Util.getChunkCoordinate(tracked.locZ));
+
+            // check range for currently tracked
+            for (Iterator<EntityPlayer> iterator = trackedEntityTracker.trackedPlayers.iterator(); iterator.hasNext();) {
+                EntityPlayer currentlyTracking = iterator.next();
+                if (currTracked != null && currTracked.contains(currentlyTracking)) {
+                    continue; // will get checked below
+                }
+                trackedEntityTracker.updatePlayer(currentlyTracking, iterator);
+            }
+
+            // ensure we're tracking players in range (possibly)
+            if (currTracked != null) {
+                for (EntityPlayer tracking : currTracked) {
+                    trackedEntityTracker.updatePlayer(tracking);
+                }
+            }
+            world.timings.tracker1.stopTiming(); // Paper
+
+            // now send updates
+            world.timings.tracker2.startTiming(); // Paper
+            trackedEntityTracker.trackerEntry.tick();
+            world.timings.tracker2.stopTiming(); // Paper
+        }
+    }
+    /* Concrete end - optimized entity tracker */
+
     protected void g() {
+        /* Concrete start - optimized entity tracker */
+        if (true) {
+            this.modifiedTrackerUpdate();
+            return;
+        }
+        /* Concrete end - optimized entity tracker */
         List<EntityPlayer> list = Lists.newArrayList();
         List<EntityPlayer> list1 = this.world.getPlayers();
 
@@ -1709,6 +1776,11 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         }
 
         public void updatePlayer(EntityPlayer entityplayer) {
+            /* Concrete start - add iterator parameter */
+            this.updatePlayer(entityplayer, null);
+        }
+        public void updatePlayer(EntityPlayer entityplayer, Iterator<EntityPlayer> iterator) {
+            /* Concrete end - add iterator parameter */
             org.spigotmc.AsyncCatcher.catchOp("player tracker update"); // Spigot
             if (entityplayer != this.tracker) {
                 Vec3D vec3d = (new Vec3D(entityplayer.locX, entityplayer.locY, entityplayer.locZ)).d(this.tracker.getPositionVector()); // MC-155077, SPIGOT-5113
@@ -1741,7 +1813,12 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                     if (flag1 && this.trackedPlayerMap.putIfAbsent(entityplayer, true) == null) { // Paper
                         this.trackerEntry.b(entityplayer);
                     }
-                } else if (this.trackedPlayers.remove(entityplayer)) {
+                    /* Concrete start - pass iterator to avoid CME */
+                } else if (iterator != null || this.trackedPlayers.remove(entityplayer)) {
+                    if (iterator != null) {
+                        iterator.remove();
+                    }
+                    /* Concrete end - pass iterator to avoid CME */
                     this.trackerEntry.a(entityplayer);
                 }
 
