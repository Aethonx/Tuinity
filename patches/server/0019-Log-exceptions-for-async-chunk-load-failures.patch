From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Tue, 7 Apr 2020 18:55:27 -0700
Subject: [PATCH] Log exceptions for async chunk load failures


diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 329a3dac404c0406e43a8425fabcead26c28a009..bfc8f6fcbebd3383658f329be6ff532067ea2240 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -407,7 +407,10 @@ public class ChunkProviderServer extends IChunkProvider {
             // either right -> failure
 
             if (throwable != null) {
-                throw new RuntimeException(throwable);
+                // Tuinity start - thank you once again completablefuture
+                MinecraftServer.LOGGER.fatal("Failed to asynchronously load chunk " + chunkPos, throwable);
+                return;
+                // Tuinity end - thank you once again completablefuture
             }
 
             this.removeTicketAtLevel(TicketType.ASYNC_LOAD, chunkPos, ticketLevel, identifier);
@@ -417,12 +420,19 @@ public class ChunkProviderServer extends IChunkProvider {
 
             if (failure.isPresent()) {
                 // failure
-                throw new IllegalStateException("Chunk failed to load: " + failure.get().toString());
+                // Tuinity start - thank you once again completablefuture
+                MinecraftServer.LOGGER.fatal("Failed to asynchronously load chunk " + chunkPos, new IllegalStateException("Chunk failed to load: " + failure.get().toString()));
+                return;
+                // Tuinity end - thank you once again completablefuture
             }
 
             onComplete.accept(either.left().get());
 
-        }, this.serverThreadQueue);
+        }, this.serverThreadQueue).exceptionally((throwable) -> {                 // Tuinity start - thank you once again completablefuture
+            MinecraftServer.LOGGER.fatal("Failed to asynchronously load chunk " + chunkPos);
+            return null;
+        });
+        // Tuinity end - thank you once again completablefuture
     }
 
     public <T> void addTicketAtLevel(TicketType<T> ticketType, ChunkCoordIntPair chunkPos, int ticketLevel, T identifier) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index eb016a7c7d9865978e08e361466674343eed1f6e..124141dd397f8bcdd3f77d60fbea6c07c93c3a75 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -2484,6 +2484,13 @@ public class CraftWorld implements World {
             this.world.doIfNotEntityTicking(() -> ret.complete(chunk == null ? null : chunk.bukkitChunk));
         });
 
+        // Tuinity start - thank you once again completablefuture
+        ret.exceptionally((throwable) -> {
+            net.minecraft.server.MinecraftServer.LOGGER.fatal("Failed to asynchronously load chunk (" + x + "," + z + ")", throwable);
+            return null;
+        });
+        // Tuinity end - thank you once again completablefuture
+
         return ret;
     }
     // Paper end
