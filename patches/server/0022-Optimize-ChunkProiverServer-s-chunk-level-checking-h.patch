From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Mon, 4 Nov 2019 22:34:59 -0800
Subject: [PATCH] Optimize ChunkProiverServer's chunk level checking helper
 methods

These can be hot functions (i.e entity ticking and block ticking),
so inline where possible, and avoid the abstraction of the
Either class.

diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 3f1a8c5ee689744f6372539881ed0345d1e2d650..cf77c8b3409166df682ebfd23be963ac3c87aea5 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -510,27 +510,39 @@ public class ChunkProviderServer extends IChunkProvider {
 
     @Override
     public boolean a(Entity entity) {
-        long i = ChunkCoordIntPair.pair(MathHelper.floor(entity.locX()) >> 4, MathHelper.floor(entity.locZ()) >> 4);
-
-        return this.a(i, PlayerChunk::b);
+        /* Concrete start - optimize is ticking ready type functions */
+        // is entity ticking ready
+        PlayerChunk playerChunk = this.getChunk(ca.spottedleaf.concrete.util.Util.getCoordinateKey(entity));
+        return playerChunk != null && playerChunk.isEntityTickingReady;
+        /* Concrete end - optimize is ticking ready type functions */
     }
 
     @Override
     public boolean a(ChunkCoordIntPair chunkcoordintpair) {
-        return this.a(chunkcoordintpair.pair(), PlayerChunk::b);
+        /* Concrete start - optimize is ticking ready type functions */
+        // is entity ticking ready
+        PlayerChunk playerChunk = this.getChunk(ca.spottedleaf.concrete.util.Util.getCoordinateKey(chunkcoordintpair));
+        return playerChunk != null && playerChunk.isEntityTickingReady;
+        /* Concrete end - optimize is ticking ready type functions */
     }
 
     @Override
     public boolean a(BlockPosition blockposition) {
-        long i = ChunkCoordIntPair.pair(blockposition.getX() >> 4, blockposition.getZ() >> 4);
-
-        return this.a(i, PlayerChunk::a);
+        /* Concrete start - optimize is ticking ready type functions */
+        // is ticking ready
+        PlayerChunk playerChunk = this.getChunk(ca.spottedleaf.concrete.util.Util.getCoordinateKey(blockposition));
+        return playerChunk != null && playerChunk.isTickingReady;
+        /* Concrete end - optimize is ticking ready type functions */
     }
 
     public boolean b(Entity entity) {
-        long i = ChunkCoordIntPair.pair(MathHelper.floor(entity.locX()) >> 4, MathHelper.floor(entity.locZ()) >> 4);
-
-        return this.a(i, PlayerChunk::c);
+        /* Concrete start - optimize is ticking ready type functions */
+        // is full chunk ready
+        if (Thread.currentThread() == this.serverThread) {
+            return this.getChunkAtIfLoadedMainThreadNoCache(ca.spottedleaf.concrete.util.Util.getChunkCoordinate(entity.locX()), ca.spottedleaf.concrete.util.Util.getChunkCoordinate(entity.locZ())) != null;
+        }
+        return this.getChunkAtIfLoadedImmediately(ca.spottedleaf.concrete.util.Util.getChunkCoordinate(entity.locX()), ca.spottedleaf.concrete.util.Util.getChunkCoordinate(entity.locZ())) != null;
+        /* Concrete end - optimize is ticking ready type functions */
     }
 
     private boolean a(long i, Function<PlayerChunk, CompletableFuture<Either<Chunk, PlayerChunk.Failure>>> function) {
-- 
2.24.0.windows.2

