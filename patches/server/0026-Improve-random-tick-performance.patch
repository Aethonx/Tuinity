From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Wed, 27 Nov 2019 04:54:58 -0800
Subject: [PATCH] Improve random tick performance


diff --git a/src/main/java/ca/spottedleaf/concrete/util/ThreadUnsafeRandom.java b/src/main/java/ca/spottedleaf/concrete/util/ThreadUnsafeRandom.java
new file mode 100644
index 0000000000000000000000000000000000000000..e8accbe0a9c52f173a532cf4efe8694e6a7c2da0
--- /dev/null
+++ b/src/main/java/ca/spottedleaf/concrete/util/ThreadUnsafeRandom.java
@@ -0,0 +1,29 @@
+package ca.spottedleaf.concrete.util;
+
+import java.util.Random;
+
+public final class ThreadUnsafeRandom extends Random {
+
+    // See javadoc and internal comments for java.util.Random where these values come from, how they are used, and the author for them.
+    private static final long multiplier = 0x5DEECE66DL;
+    private static final long addend = 0xBL;
+    private static final long mask = (1L << 48) - 1;
+
+    private static long initialScramble(long seed) {
+        return (seed ^ multiplier) & mask;
+    }
+
+    private long seed;
+
+    @Override
+    public void setSeed(long seed) {
+        // note: called by Random constructor
+        this.seed = initialScramble(seed);
+    }
+
+    @Override
+    protected int next(int bits) {
+        // avoid the expensive CAS logic used by superclass
+        return (int) (((this.seed = this.seed * multiplier + addend) & mask) >>> (48 - bits));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BiomeBase.java b/src/main/java/net/minecraft/server/BiomeBase.java
index 0102a170dc333fb4af01efa0aaa66df85271f1e0..e56a8284adbe03f52e623074677a83099e6dd91f 100644
--- a/src/main/java/net/minecraft/server/BiomeBase.java
+++ b/src/main/java/net/minecraft/server/BiomeBase.java
@@ -166,12 +166,18 @@ public abstract class BiomeBase {
     }
 
     public boolean a(IWorldReader iworldreader, BlockPosition blockposition, boolean flag) {
+        /* Concrete start - Add Chunk parameter */
+        return this.transformWater(iworldreader, blockposition, flag, null);
+    }
+    public boolean transformWater(IWorldReader iworldreader, BlockPosition blockposition, boolean flag, IChunkAccess chunk) {
+        /* Concrete end - Add Chunk parameter */
         if (this.getAdjustedTemperature(blockposition) >= 0.15F) {
             return false;
         } else {
             if (blockposition.getY() >= 0 && blockposition.getY() < 256 && iworldreader.getBrightness(EnumSkyBlock.BLOCK, blockposition) < 10) {
-                IBlockData iblockdata = iworldreader.getType(blockposition);
-                Fluid fluid = iworldreader.getFluid(blockposition);
+                if (chunk == null) chunk = iworldreader.getChunkAt(blockposition.getX() >> 4, blockposition.getZ() >> 4); /* Concrete - Add Chunk parameter */
+                IBlockData iblockdata = chunk.getType(blockposition); /* Concrete - avoid chunk lookup */
+                Fluid fluid = iblockdata.getFluid(); /* Concrete - avoid chunk lookup + IBlockData lookup */
 
                 if (fluid.getType() == FluidTypes.WATER && iblockdata.getBlock() instanceof BlockFluids) {
                     if (!flag) {
@@ -191,11 +197,17 @@ public abstract class BiomeBase {
     }
 
     public boolean b(IWorldReader iworldreader, BlockPosition blockposition) {
+        /* Concrete start - add Chunk parameter */
+        return this.canPlaceSnow(iworldreader, blockposition, null);
+    }
+    public boolean canPlaceSnow(IWorldReader iworldreader, BlockPosition blockposition, IChunkAccess chunk) {
+        /* Concrete end - add Chunk parameter */
         if (this.getAdjustedTemperature(blockposition) >= 0.15F) {
             return false;
         } else {
             if (blockposition.getY() >= 0 && blockposition.getY() < 256 && iworldreader.getBrightness(EnumSkyBlock.BLOCK, blockposition) < 10) {
-                IBlockData iblockdata = iworldreader.getType(blockposition);
+                if (chunk == null) chunk = iworldreader.getChunkAt(blockposition.getX() >> 4, blockposition.getZ() >> 4); /* Concrete - Add Chunk parameter */
+                IBlockData iblockdata = chunk.getType(blockposition); /* Concrete - avoid chunk lookup */
 
                 if (iblockdata.isAir() && Blocks.SNOW.getBlockData().canPlace(iworldreader, blockposition)) {
                     return true;
diff --git a/src/main/java/net/minecraft/server/BlockFluids.java b/src/main/java/net/minecraft/server/BlockFluids.java
index 6d351f0979ecfa8e500edf8dd03b4a455fd5d180..ee4f33b056a1137a4a620fb2635a4bf8dcf7e45f 100644
--- a/src/main/java/net/minecraft/server/BlockFluids.java
+++ b/src/main/java/net/minecraft/server/BlockFluids.java
@@ -27,7 +27,7 @@ public class BlockFluids extends Block implements IFluidSource {
 
     @Override
     public void b(IBlockData iblockdata, WorldServer worldserver, BlockPosition blockposition, Random random) {
-        worldserver.getFluid(blockposition).b(worldserver, blockposition, random);
+        iblockdata.getFluid().b(worldserver, blockposition, random); /* Concrete - avoid another getType call */
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 474c7370041972688d09d8a2d05ae4683cdb96df..e2d77de69c2b4de66c0d31df7c6dd90c664bdf0a 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -90,6 +90,8 @@ public class Chunk implements IChunkAccess {
     private final int[] inventoryEntityCounts = new int[16];
     // Paper end
 
+    final ca.spottedleaf.concrete.util.IBlockDataList tickingList = new ca.spottedleaf.concrete.util.IBlockDataList(); /* Concrete */
+
     public Chunk(World world, ChunkCoordIntPair chunkcoordintpair, BiomeStorage biomestorage, ChunkConverter chunkconverter, TickList<Block> ticklist, TickList<FluidType> ticklist1, long i, @Nullable ChunkSection[] achunksection, @Nullable Consumer<Chunk> consumer) {
         this.sections = new ChunkSection[16];
         this.e = Maps.newHashMap();
@@ -124,6 +126,18 @@ public class Chunk implements IChunkAccess {
         this.v = consumer;
         if (achunksection != null) {
             if (this.sections.length == achunksection.length) {
+                /* Concrete start */
+                for (ChunkSection section : achunksection) {
+                    if (section != null) {
+                        section.chunk = this;
+                        int offset = ca.spottedleaf.concrete.util.IBlockDataList.getLocationKey(0, section.yPos, 0);
+                        for (it.unimi.dsi.fastutil.longs.LongIterator iterator = section.tickingList.getRawIterator(); iterator.hasNext();) {
+                            long raw = iterator.nextLong();
+                            this.tickingList.add(ca.spottedleaf.concrete.util.IBlockDataList.getLocationFromRaw(raw) + offset, ca.spottedleaf.concrete.util.IBlockDataList.getBlockDataFromRaw(raw));
+                        }
+                    }
+                }
+                /* Concrete start */
                 System.arraycopy(achunksection, 0, this.sections, 0, this.sections.length);
             } else {
                 Chunk.LOGGER.warn("Could not set level chunk sections, array length is {} instead of {}", achunksection.length, this.sections.length);
diff --git a/src/main/java/net/minecraft/server/ChunkSection.java b/src/main/java/net/minecraft/server/ChunkSection.java
index 4526527aca19bf9c57d7e77a661c847131867d5a..b66a162ddaf5c530b805425325dd2a1192c89736 100644
--- a/src/main/java/net/minecraft/server/ChunkSection.java
+++ b/src/main/java/net/minecraft/server/ChunkSection.java
@@ -5,11 +5,13 @@ import javax.annotation.Nullable;
 public class ChunkSection {
 
     public static final DataPalette<IBlockData> GLOBAL_PALETTE = new DataPaletteGlobal<>(Block.REGISTRY_ID, Blocks.AIR.getBlockData());
-    private final int yPos;
+    final int yPos; /* Concrete - private -> package */
     short nonEmptyBlockCount; // Paper - private -> package-private
-    private short tickingBlockCount;
+    short tickingBlockCount; /* Concrete - private -> package */
     private short e;
     final DataPaletteBlock<IBlockData> blockIds;
+    Chunk chunk; /* Concrete */
+    final ca.spottedleaf.concrete.util.IBlockDataList tickingList = new ca.spottedleaf.concrete.util.IBlockDataList(); /* Concrete */
 
     public ChunkSection(int i) {
         // Paper start - add parameters
@@ -31,6 +33,11 @@ public class ChunkSection {
         this.tickingBlockCount = short1;
         this.e = short2;
         this.blockIds = new DataPaletteBlock<>(ChunkSection.GLOBAL_PALETTE, Block.REGISTRY_ID, GameProfileSerializer::d, GameProfileSerializer::a, Blocks.AIR.getBlockData(), world instanceof GeneratorAccess ? ((GeneratorAccess) world).getMinecraftWorld().chunkPacketBlockController.getPredefinedBlockData(world, chunk, this, initializeBlocks) : null, initializeBlocks); // Paper - Anti-Xray - Add predefined block data
+        /* Concrete start */
+        if (chunk instanceof Chunk) {
+            this.chunk = (Chunk)chunk;
+        }
+        /* Concrete end */
     }
 
     public IBlockData getType(int i, int j, int k) {
@@ -69,6 +76,12 @@ public class ChunkSection {
             --this.nonEmptyBlockCount;
             if (iblockdata1.q()) {
                 --this.tickingBlockCount;
+                /* Concrete start */
+                this.tickingList.remove(i, j, k);
+                if (this.chunk != null) {
+                    this.chunk.tickingList.remove(i, j + this.yPos, k);
+                }
+                /* Concrete end */
             }
         }
 
@@ -80,6 +93,12 @@ public class ChunkSection {
             ++this.nonEmptyBlockCount;
             if (iblockdata.q()) {
                 ++this.tickingBlockCount;
+                /* Concrete start */
+                this.tickingList.add(i, j, k, iblockdata);
+                if (this.chunk != null) {
+                    this.chunk.tickingList.add(i, j + this.yPos, k, iblockdata);
+                }
+                /* Concrete end */
             }
         }
 
@@ -115,23 +134,39 @@ public class ChunkSection {
     }
 
     public void recalcBlockCounts() {
+        /* Concrete start */
+        int offset = ca.spottedleaf.concrete.util.IBlockDataList.getLocationKey(0, this.yPos, 0);
+        if (this.chunk != null) {
+            for (it.unimi.dsi.fastutil.longs.LongIterator iterator = this.tickingList.getRawIterator(); iterator.hasNext();) {
+                long raw = iterator.nextLong();
+                this.chunk.tickingList.remove(ca.spottedleaf.concrete.util.IBlockDataList.getLocationFromRaw(raw) + offset);
+            }
+        }
+        this.tickingList.clear();
+        /* Concrete end */
         this.nonEmptyBlockCount = 0;
         this.tickingBlockCount = 0;
         this.e = 0;
-        this.blockIds.a((iblockdata, i) -> {
+        this.blockIds.forEachLocation((iblockdata, location) -> { /* Concrete */
             Fluid fluid = iblockdata.getFluid();
 
             if (!iblockdata.isAir()) {
-                this.nonEmptyBlockCount = (short) (this.nonEmptyBlockCount + i);
+                this.nonEmptyBlockCount = (short) (this.nonEmptyBlockCount + 1); /* Concrete */
                 if (iblockdata.q()) {
-                    this.tickingBlockCount = (short) (this.tickingBlockCount + i);
+                    /* Concrete start */
+                    this.tickingList.add(location, iblockdata);
+                    if (this.chunk != null) {
+                        this.chunk.tickingList.add(location + offset, iblockdata);
+                    }
+                    this.tickingBlockCount = (short) (this.tickingBlockCount + 1);
+                    /* Concrete end */
                 }
             }
 
             if (!fluid.isEmpty()) {
-                this.nonEmptyBlockCount = (short) (this.nonEmptyBlockCount + i);
+                this.nonEmptyBlockCount = (short) (this.nonEmptyBlockCount + 1); /* Concrete */
                 if (fluid.h()) {
-                    this.e = (short) (this.e + i);
+                    this.e = (short) (this.e + 1); /* Concrete */
                 }
             }
 
diff --git a/src/main/java/net/minecraft/server/DataBits.java b/src/main/java/net/minecraft/server/DataBits.java
index f9680b6830c77f31e1eb8b6845dd6d58d04f624a..151baeabbab155cd7fc44d41ae3524e773c85e7f 100644
--- a/src/main/java/net/minecraft/server/DataBits.java
+++ b/src/main/java/net/minecraft/server/DataBits.java
@@ -127,4 +127,46 @@ public class DataBits {
 
         }
     }
+
+    /* Concrete start */
+    public void forEach(DataBitConsumer consumer) {
+        // Note: copied from above
+        int i = this.a.length;
+
+        if (i != 0) {
+            int j = 0;
+            long k = this.a[0];
+            long l = i > 1 ? this.a[1] : 0L;
+
+            for (int i1 = 0; i1 < this.d; ++i1) {
+                int j1 = i1 * this.b;
+                int k1 = j1 >> 6;
+                int l1 = (i1 + 1) * this.b - 1 >> 6;
+                int i2 = j1 ^ k1 << 6;
+
+                if (k1 != j) {
+                    k = l;
+                    l = k1 + 1 < i ? this.a[k1 + 1] : 0L;
+                    j = k1;
+                }
+
+                if (k1 == l1) {
+                    consumer.accept(i1, (int) (k >>> i2 & this.c));
+                } else {
+                    int j2 = 64 - i2;
+
+                    consumer.accept(i1, (int) ((k >>> i2 | l << j2) & this.c));
+                }
+            }
+
+        }
+    }
+
+    @FunctionalInterface
+    static interface DataBitConsumer {
+
+        void accept(int location, int data);
+
+    }
+    /* Concrete end */
 }
diff --git a/src/main/java/net/minecraft/server/DataPaletteBlock.java b/src/main/java/net/minecraft/server/DataPaletteBlock.java
index 0fc826da5959179f3c0bce005324f4b157d93723..e14077bcc0da2bc83571b136fdd62df34967e1aa 100644
--- a/src/main/java/net/minecraft/server/DataPaletteBlock.java
+++ b/src/main/java/net/minecraft/server/DataPaletteBlock.java
@@ -288,6 +288,14 @@ public class DataPaletteBlock<T> implements DataPaletteExpandable<T> {
         });
     }
 
+    /* Concrete start */
+    public void forEachLocation(DataPaletteBlock.a<T> datapaletteblock_a) {
+        this.getDataBits().forEach((int location, int data) -> {
+            datapaletteblock_a.accept(this.getDataPalette().getObject(data), location);
+        });
+    }
+    /* Concrete end */
+
     @FunctionalInterface
     public interface a<T> {
 
diff --git a/src/main/java/net/minecraft/server/FluidImpl.java b/src/main/java/net/minecraft/server/FluidImpl.java
index ac9b8909135074ccdc8b9d2886b1b74939853231..69a7d7ad68d5dad2e0036f77e5581f94bd852f78 100644
--- a/src/main/java/net/minecraft/server/FluidImpl.java
+++ b/src/main/java/net/minecraft/server/FluidImpl.java
@@ -6,10 +6,19 @@ public class FluidImpl extends BlockDataAbstract<FluidType, Fluid> implements Fl
 
     public FluidImpl(FluidType fluidtype, ImmutableMap<IBlockState<?>, Comparable<?>> immutablemap) {
         super(fluidtype, immutablemap);
+        this.isLava = this.getType().j(); /* Concrete */
     }
 
     @Override
     public FluidType getType() {
         return (FluidType) this.a;
     }
+
+    /* Concrete start */
+    private final boolean isLava;
+
+    public final boolean h() {
+        return this.isLava;
+    }
+    /* Concrete end */
 }
diff --git a/src/main/java/net/minecraft/server/IBlockData.java b/src/main/java/net/minecraft/server/IBlockData.java
index de43881653ff37e38dc42c7f953dc96126a30c61..20d682d739b2a8a0eea8434334dd4d8c68318e84 100644
--- a/src/main/java/net/minecraft/server/IBlockData.java
+++ b/src/main/java/net/minecraft/server/IBlockData.java
@@ -27,6 +27,7 @@ public class IBlockData extends BlockDataAbstract<Block, IBlockData> implements
         super(block, immutablemap);
         this.d = block.a(this);
         this.e = block.o(this);
+        this.isTicking = this.getBlock().isTicking(this); /* Concrete */
     }
 
     public void c() {
@@ -267,12 +268,19 @@ public class IBlockData extends BlockDataAbstract<Block, IBlockData> implements
         return this.getBlock().a(tag);
     }
 
+    private Fluid fluid;
     public Fluid getFluid() {
-        return this.getBlock().a_(this);
+        if (this.fluid != null) {
+            return this.fluid;
+        }
+        return this.fluid = this.getBlock().a_(this);
     }
 
+    /* Concrete start */
+    private final boolean isTicking;
     public boolean q() {
-        return this.getBlock().isTicking(this);
+        return this.isTicking;
+        /* Concrete end */
     }
 
     public final SoundEffectType getStepSound() { return this.r(); } // Paper - OBFHELPER
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 1f0bad357045974448e1e395cee52f3e6e6bd446..be86a1e9a66ef6dc6ee77548371280309e7ef35e 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -533,6 +533,9 @@ public class WorldServer extends World {
     }
 
     private final BlockPosition.MutableBlockPosition chunkTickMutablePosition = new BlockPosition.MutableBlockPosition(); /* Concrete - use mutable to reduce allocation rate */
+    /* Concrete start */
+    private final ca.spottedleaf.concrete.util.ThreadUnsafeRandom randomTickRandom = new ca.spottedleaf.concrete.util.ThreadUnsafeRandom();
+    /* Concrete end  */
 
     public void a(Chunk chunk, int i) {
         ChunkCoordIntPair chunkcoordintpair = chunk.getPos();
@@ -544,7 +547,7 @@ public class WorldServer extends World {
         gameprofilerfiller.enter("thunder");
         final BlockPosition.MutableBlockPosition blockposition = this.chunkTickMutablePosition; /* Concrete - use mutable to reduce allocation rate, final to force compile fail on change */
 
-        if (!this.paperConfig.disableThunder && flag && this.U() && this.random.nextInt(100000) == 0) { // Paper - Disable thunder
+        if (!this.paperConfig.disableThunder && flag && this.U() && this.randomTickRandom.nextInt(100000) == 0) { // Paper - Disable thunder /* Concrete */
             blockposition.setValues(this.a(this.getRandomBlockPosition(j, 0, k, 15, blockposition))); /* Concrete - use mutable to reduce allocation rate */
             if (this.isRainingAt(blockposition)) {
                 DifficultyDamageScaler difficultydamagescaler = this.getDamageScaler(blockposition);
@@ -564,61 +567,71 @@ public class WorldServer extends World {
         }
 
         gameprofilerfiller.exitEnter("iceandsnow");
-        if (!this.paperConfig.disableIceAndSnow && this.random.nextInt(16) == 0) { // Paper - Disable ice and snow
-            blockposition.setValues(this.getHighestBlockYAt(HeightMap.Type.MOTION_BLOCKING, this.getRandomBlockPosition(j, 0, k, 15, blockposition))); /* Concrete - use mutable to reduce allocation rate */
-            BlockPosition blockposition1 = blockposition.down();
+        /* Concrete start */
+        if (!this.paperConfig.disableIceAndSnow && this.randomTickRandom.nextInt(16) == 0) { // Paper - Disable ice and snow
+            this.getRandomBlockPosition(j, 0, k, 15, blockposition);
+            int normalY = chunk.getHighestBlockYAt(HeightMap.Type.MOTION_BLOCKING, blockposition.getX(), blockposition.getZ());
+            int downY = normalY - 1;
+            blockposition.setY(normalY);
             BiomeBase biomebase = this.getBiome(blockposition);
 
-            if (biomebase.a((IWorldReader) this, blockposition1)) {
-                org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(this, blockposition1, Blocks.ICE.getBlockData(), null); // CraftBukkit
+            blockposition.setY(downY);
+            if (biomebase.transformWater((IWorldReader) this, blockposition, true, chunk)) {
+                org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(this, blockposition, Blocks.ICE.getBlockData(), null); // CraftBukkit
             }
 
-            if (flag && biomebase.b(this, blockposition)) {
+            blockposition.setY(normalY);
+            if (flag && biomebase.canPlaceSnow(this, blockposition, chunk)) {
                 org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(this, blockposition, Blocks.SNOW.getBlockData(), null); // CraftBukkit
             }
+            blockposition.setY(blockposition.getY() - 1);
 
-            if (flag && this.getBiome(blockposition1).d() == BiomeBase.Precipitation.RAIN) {
-                this.getType(blockposition1).getBlock().c((World) this, blockposition1);
+            if (flag && this.getBiome(blockposition).d() == BiomeBase.Precipitation.RAIN) {
+                this.getType(blockposition).getBlock().c((World) this, blockposition);
             }
+            /* Concrete end */
         }
 
-        gameprofilerfiller.exitEnter("tickBlocks");
-        timings.chunkTicksBlocks.startTiming(); // Paper
-        if (i > 0) {
-            ChunkSection[] achunksection = chunk.getSections();
-            int l = achunksection.length;
-
-            for (int i1 = 0; i1 < l; ++i1) {
-                ChunkSection chunksection = achunksection[i1];
-
-                if (chunksection != Chunk.a && chunksection.d()) {
-                    int j1 = chunksection.getYPosition();
-
-                    for (int k1 = 0; k1 < i; ++k1) {
-                        BlockPosition blockposition2 = this.getRandomBlockPosition(j, j1, k, 15, blockposition); /* Concrete - use mutable to reduce allocation rate */
-
-                        gameprofilerfiller.enter("randomTick");
-                        IBlockData iblockdata = chunksection.getType(blockposition2.getX() - j, blockposition2.getY() - j1, blockposition2.getZ() - k);
+        gameprofilerfiller.exit();
+        /* Concrete start - optimise random block tick */
+        int blocks = chunk.tickingList.size();
+        if (i > 0 && blocks > 0) { /* Concrete */
+            if ((this.randomTickRandom.nextInt() & (16 * 16 * 256 - 1)) > blocks) {
+                // we optimise random block ticking by realising that most of the blocks we will try to tick
+                // are not tickable. Instead we only tick tickable blocks, but only if the above
+                // statement is true
+                // Note: The number of blocks that get ticked per tick still REMAIN the same.
+                return;
+            }
+            gameprofilerfiller.enter("tickBlocks");
+            timings.chunkTicksBlocks.startTiming(); // Paper
 
-                        if (iblockdata.q()) {
-                            iblockdata.getBlock().randomTick = true; // Paper - fix MC-113809
-                            iblockdata.b(this, blockposition2, this.random);
-                            iblockdata.getBlock().randomTick = false; // Paper - fix MC-113809
-                        }
+            int toTick = i << 4; // i * 16
 
-                        Fluid fluid = iblockdata.getFluid();
+            gameprofilerfiller.enter("randomTick");
+            for (int tick = 0; tick < toTick; ++tick) {
+                int index = ((char)this.randomTickRandom.nextInt()) % (char)chunk.tickingList.size();
+                long raw = chunk.tickingList.getRaw(index);
+                int location = ca.spottedleaf.concrete.util.IBlockDataList.getLocationFromRaw(raw);
+                int randomX = location & 15;
+                int randomY = (location >>> (4 + 4)) & 255;
+                int randomZ = (location >>> 4) & 15;
+                BlockPosition blockposition2 = blockposition.setValues(j + randomX, randomY, k + randomZ);
+                IBlockData iblockdata = ca.spottedleaf.concrete.util.IBlockDataList.getBlockDataFromRaw(raw);
 
-                        if (fluid.h()) {
-                            fluid.b(this, blockposition2, this.random);
-                        }
+                iblockdata.getBlock().randomTick = true; // Paper - fix MC-113809
+                iblockdata.b(this, blockposition2, this.randomTickRandom);
+                iblockdata.getBlock().randomTick = false; // Paper - fix MC-113809
 
-                        gameprofilerfiller.exit();
-                    }
-                }
+                // We drop the fluid tick since LAVA is ALREADY TICKED by the above method.
+                // TODO THIS NEEDS TO BE CHECKED ON UPDATE
             }
+
+            gameprofilerfiller.exit();
+            timings.chunkTicksBlocks.stopTiming(); // Paper
+            gameprofilerfiller.exit();
+            /* Concrete end - optimise random block tick */
         }
-        timings.chunkTicksBlocks.stopTiming(); // Paper
-        gameprofilerfiller.exit();
     }
 
     protected BlockPosition a(BlockPosition blockposition) {
-- 
2.24.0.windows.2

