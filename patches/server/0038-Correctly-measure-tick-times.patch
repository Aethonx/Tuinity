From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Sat, 11 Apr 2020 01:01:28 -0700
Subject: [PATCH] Correctly measure tick times

Do not ignore the time taken by oversleep and executeAll

diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 59fc0eb6bf4fc3391111c395af2bc2375ca0bd49..f16381ef3c536aa3de7792024f0abc042c1c86e6 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1104,6 +1104,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     protected void exit() {}
 
     protected void a(BooleanSupplier booleansupplier) {
+        long i = SystemUtils.getMonotonicNanos(); // Tuinity - this required to be above oversleep
         co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTiming(); // Paper
         // Paper start - move oversleep into full server tick
         MinecraftTimings.serverOversleep.startTiming();
@@ -1113,7 +1114,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         MinecraftTimings.serverOversleep.stopTiming();
         // Paper end
         this.slackActivityAccountant.tickStarted(); // Spigot
-        long i = SystemUtils.getMonotonicNanos();
+        // Tuinity - this is required to be above oversleep
         new com.destroystokyo.paper.event.server.ServerTickStartEvent(this.ticks+1).callEvent(); // Paper
 
         ++this.ticks;
@@ -1165,6 +1166,19 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         }
 
         this.methodProfiler.exit();
+        // Tuinity - move this logic must be after the server has actually stopped ticking
+        // Paper start - move executeAll() into full server tick timing
+        try (co.aikar.timings.Timing ignored = MinecraftTimings.processTasksTimer.startTiming()) {
+            this.executeAll();
+        }
+        // Paper end
+        // Paper start
+        long endTime = System.nanoTime();
+        long remaining = (TICK_TIME - (endTime - lastTick)) - catchupTime;
+        new com.destroystokyo.paper.event.server.ServerTickEndEvent(this.ticks, ((double)(endTime - lastTick) / 1000000D), remaining).callEvent();
+        // Paper end
+        co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Paper
+        // Tuinity start - this logic must be after the server has actually stopped ticking
         this.methodProfiler.enter("tallying");
         long l = this.f[this.ticks % 100] = SystemUtils.getMonotonicNanos() - i;
 
@@ -1181,17 +1195,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         this.methodProfiler.exit();
         org.spigotmc.WatchdogThread.tick(); // Spigot
         this.slackActivityAccountant.tickEnded(l); // Spigot
-        // Paper start - move executeAll() into full server tick timing
-        try (co.aikar.timings.Timing ignored = MinecraftTimings.processTasksTimer.startTiming()) {
-            this.executeAll();
-        }
-        // Paper end
-        // Paper start
-        long endTime = System.nanoTime();
-        long remaining = (TICK_TIME - (endTime - lastTick)) - catchupTime;
-        new com.destroystokyo.paper.event.server.ServerTickEndEvent(this.ticks, ((double)(endTime - lastTick) / 1000000D), remaining).callEvent();
-        // Paper end
-        co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Paper
+        // Tuinity end - this logic must be after the server has actually stopped ticking
     }
 
     protected void b(BooleanSupplier booleansupplier) {
