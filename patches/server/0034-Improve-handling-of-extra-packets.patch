From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Sat, 25 Apr 2020 15:36:38 -0700
Subject: [PATCH] Improve handling of extra packets

- Append the generic future listener to the end of the extra packets,
  rather than attaching it to each extra packet
- Make only one flush call per extra packet
- Make only flush call per sendPacket call, by moving all of the packet
  writing into sendPacketQueue()

Moving the extra packets into the packet queue also allows
us to correctly handle packetplayoutmapchunk as an extra packet, as
the previous logic did not block the sending of them until they
were ready. This patch is thus relied upon by the improve chunk oversized
packet patch.

diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 3e4da3a181bbe950f1306a89250e3d7d566de341..5d351d9e9336658b1889550df68674f42ba404a8 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -173,17 +173,53 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
         this.packetListener = packetlistener;
     }
 
+    // Tuinity start
+    private static java.util.List<Packet> buildExtraPackets(Packet packet) {
+        java.util.List<Packet> extra = packet.getExtraPackets();
+        if (extra == null || extra.isEmpty()) {
+            return null;
+        }
+        java.util.List<Packet> ret = new java.util.ArrayList<>(1 + extra.size());
+        buildExtraPackets0(extra, ret);
+        return ret;
+    }
+
+    private static void buildExtraPackets0(java.util.List<Packet> extraPackets, java.util.List<Packet> into) {
+        for (Packet extra : extraPackets) {
+            into.add(extra);
+            java.util.List<Packet> extraExtra = extra.getExtraPackets();
+            if (extraExtra != null && !extraExtra.isEmpty()) {
+                buildExtraPackets0(extraExtra, into);
+            }
+        }
+    }
+    // Tuinity end
+
     public void sendPacket(Packet<?> packet) {
         this.sendPacket(packet, (GenericFutureListener) null);
     }
 
     public void sendPacket(Packet<?> packet, @Nullable GenericFutureListener<? extends Future<? super Void>> genericfuturelistener) {
-        if (this.isConnected() && this.sendPacketQueue() && !(packet instanceof PacketPlayOutMapChunk && !((PacketPlayOutMapChunk) packet).isReady())) { // Paper - Async-Anti-Xray - Add chunk packets which are not ready or all packets if the packet queue contains chunk packets which are not ready to the packet queue and send the packets later in the right order
-            //this.o(); // Paper - Async-Anti-Xray - Move to if statement (this.sendPacketQueue())
-            this.writePacket(packet, genericfuturelistener, null); // Tuinity - allow controlled flushing
-        } else {
+        // Tuinity start - handle oversized packets better
+        // write the packets to the queue, then flush - antixray hooks there already
+        java.util.List<Packet> extraPackets = buildExtraPackets(packet);
+        boolean hasExtraPackets = extraPackets != null && !extraPackets.isEmpty();
+        if (!hasExtraPackets) {
             this.packetQueue.add(new NetworkManager.QueuedPacket(packet, genericfuturelistener));
+        } else {
+            java.util.List<NetworkManager.QueuedPacket> packets = new java.util.ArrayList<>(1 + extraPackets.size());
+            packets.add(new NetworkManager.QueuedPacket(packet, null)); // delay the future listener until the end of the extra packets
+
+            for (int i = 0, len = extraPackets.size(); i < len;) {
+                Packet extra = extraPackets.get(i);
+                boolean end = ++i == len;
+                packets.add(new NetworkManager.QueuedPacket(extra, end ? genericfuturelistener : null)); // append listener to the end
+            }
+
+            this.packetQueue.addAll(packets); // atomic
         }
+        this.sendPacketQueue(); // ensure only one flush call is made
+        // Tuinity end - handle oversized packets better
 
     }
 
@@ -234,14 +270,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
             });
         }
 
-        // Paper start
-        java.util.List<Packet> extraPackets = packet.getExtraPackets();
-        if (extraPackets != null && !extraPackets.isEmpty()) {
-            for (Packet extraPacket : extraPackets) {
-                this.writePacket(extraPacket, genericfuturelistener, effectiveFlush); // Tuinity - add flush parameter
-            }
-        }
-        // Paper end
+        // Tuinity - moved into sendPacket
 
     }
 
