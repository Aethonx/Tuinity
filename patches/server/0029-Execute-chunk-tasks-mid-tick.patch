From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Mon, 6 Apr 2020 04:20:44 -0700
Subject: [PATCH] Execute chunk tasks mid-tick

This will help the server load chunks if tick times are high.

diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index a28fc6249de73c1c75e66a4cac39194b277c64fe..8e77055615b22e767d16177950438bafba9eb491 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -614,7 +614,7 @@ public class ChunkProviderServer extends IChunkProvider {
         this.world.getMethodProfiler().enter("purge");
         this.world.timings.doChunkMap.startTiming(); // Spigot
         this.chunkMapDistance.purgeTickets();
-        this.world.getMinecraftServer().midTickLoadChunks(); // Paper
+        // Tuinity - replace logic
         this.tickDistanceManager();
         this.world.timings.doChunkMap.stopTiming(); // Spigot
         // Tuinity start
@@ -629,7 +629,7 @@ public class ChunkProviderServer extends IChunkProvider {
         this.world.timings.doChunkUnload.startTiming(); // Spigot
         this.world.getMethodProfiler().exitEnter("unload");
         this.playerChunkMap.unloadChunks(booleansupplier);
-        this.world.getMinecraftServer().midTickLoadChunks(); // Paper
+        // Tuinity - replace logic
         this.world.timings.doChunkUnload.stopTiming(); // Spigot
         this.world.getMethodProfiler().exit();
         this.clearCache();
@@ -806,7 +806,11 @@ public class ChunkProviderServer extends IChunkProvider {
                         this.world.timings.chunkTicks.startTiming(); // Spigot // Paper
                         this.world.a(chunk, k);
                         this.world.timings.chunkTicks.stopTiming(); // Spigot // Paper
-                        if (chunksTicked[0]++ % 10 == 0) this.world.getMinecraftServer().midTickLoadChunks(); // Paper
+                        // Tuinity start - exec chunk tasks during world tick
+                        if ((chunk.getPos().pair() & 7) <= 1) { // crude but good enough random check, don't want to run the below too many times...
+                            this.world.executeAllChunkTasks();
+                        }
+                        // Tuinity end - exec chunk tasks during world tick
                     }
                 }
             });
@@ -948,37 +952,7 @@ public class ChunkProviderServer extends IChunkProvider {
             super.executeTask(runnable);
         }
 
-        // Paper start
-        private long lastChunkTask = 0;
-        public void midTickLoadChunks() {
-            MinecraftServer server = ChunkProviderServer.this.world.getMinecraftServer();
-            try (co.aikar.timings.Timing ignored = co.aikar.timings.MinecraftTimings.midTickChunkTasks.startTiming()) {
-                while (server.canSleepForTick()) {
-                    try {
-                        // always try to load chunks as long as we aren't falling behind, restrain generation/other updates only.
-                        boolean execChunkTask = com.destroystokyo.paper.io.chunk.ChunkTaskManager.pollChunkWaitQueue() || ChunkProviderServer.this.world.asyncChunkTaskManager.pollNextChunkTask(); // Paper
-                        if (ChunkProviderServer.this.tickDistanceManager() || execChunkTask) {
-                            continue;
-                        }
-                        long now = System.nanoTime();
-                        // cap to 1 task every 0.1ms per world and max 200 tasks per tick.
-                        // Anything that doesn't make it past this can load during sleep
-                        // we do not want to use this.executeNext as that also processes chunk loads and might count against task counter.
-                        // We also have already ticked the distance manager above too.
-                        if (server.chunksTasksRan < 200 && now - lastChunkTask > 100000 && super.executeNext()) {
-                            ChunkProviderServer.this.lightEngine.queueUpdate();
-                            server.chunksTasksRan++;
-                            lastChunkTask = now;
-                        }
-                        break;
-                    } finally {
-                        // from below: process pending Chunk loadCallback() and unloadCallback() after each run task
-                        playerChunkMap.callbackExecutor.run();
-                    }
-                }
-            }
-        }
-        // Paper end
+        // Tuinity - replace logic
 
         @Override
         protected boolean executeNext() {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 75495db34ad3f0846091d1ba727dac2bb95d8921..59fc0eb6bf4fc3391111c395af2bc2375ca0bd49 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -924,7 +924,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
                         // Paper end
                         tickSection = curTime;
                     }
-                    chunksTasksRan = 0; // Paper
+                    // Tuinity - replace logic
                     // Spigot end
 
                     //MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit // Paper - don't overwrite current tick time
@@ -1023,19 +1023,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         });
     }
 
-    // Paper start
-    public int chunksTasksRan = 0;
-    public void midTickLoadChunks() {
-        if (!this.canSleepForTick()) {
-            return;
-        }
-
-        Iterator<WorldServer> iterator = this.getWorlds().iterator();
-        while (this.canSleepForTick() && iterator.hasNext()) {
-            iterator.next().getChunkProvider().serverThreadQueue.midTickLoadChunks();
-        }
-    }
-    // Paper end
+    // Tuinity - replace logic
 
     @Override
     protected TickTask postToMainThread(Runnable runnable) {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index a8c8df85707d0d031ad62299be3de74c6f18b8e5..f26a3168b620158c32d4a7a37df7fec71d543ed0 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -813,6 +813,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
                     }
                     // Spigot end
                 }
+                ((WorldServer)this).executeAllChunkTasks(); // Tuinity - exec chunk tasks during world tick
             }
 
             if (tileentity.isRemoved()) {
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index a3e37a060834c62a53d4340f3235c8664225cb1e..dd6101cba7e33624b6b3c5f9d4ddc2e2faa35c7d 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -196,6 +196,56 @@ public class WorldServer extends World {
     }
     // Tuinity end - Optimize entity list iteration requiring entities be in loaded chunks
 
+    // Tuinity start - execute chunk tasks mid tick
+    static final long CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME = 25L * 1000L; // 50us
+    static final long MAX_CHUNK_EXEC_TIME = 2L * 500L; // 5us
+    static final double MAX_PERCENT_USAGE_CHUNK_TASK = (double)MAX_CHUNK_EXEC_TIME/(double)CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME;
+
+    static final long TASK_EXECUTION_FAILURE_BACKOFF = 2L * 1000L; // 1us
+
+    private static long lastExecuteAllTime;
+    private static long lastExecuteAllFailure;
+
+    final void executeAllChunkTasks() {
+        long startTime = System.nanoTime();
+        if ((startTime - lastExecuteAllTime) <= CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME || (startTime - lastExecuteAllFailure) <= TASK_EXECUTION_FAILURE_BACKOFF) {
+            // it's shown to be bad to constantly hit the queue (chunk loads slow to a crawl), even if no tasks are executed.
+            // so, backoff to prevent this
+            return;
+        }
+
+        co.aikar.timings.MinecraftTimings.midTickChunkTasks.startTiming();
+        try {
+            ChunkProviderServer chunkProviderServer = this.getChunkProvider();
+            for (;;) {
+                boolean moreTasks = chunkProviderServer.runTasks();
+                long currTime = System.nanoTime();
+                long diff = currTime - startTime;
+
+                if (!moreTasks || diff >= MAX_CHUNK_EXEC_TIME) {
+                    if (!moreTasks) {
+                        lastExecuteAllFailure = currTime;
+                    }
+
+                    // note: negative values reduce the time
+                    long overuse = diff - MAX_CHUNK_EXEC_TIME;
+                    if (overuse >= (10L * 1000L * 1000L * 1000L)) { // 10ms
+                        overuse = 10L * 1000L * 1000L * 1000L;
+                    }
+
+                    double overuseCount = (double)overuse/(double)MAX_CHUNK_EXEC_TIME;
+                    long extraSleep = (long)Math.round(overuseCount*CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME);
+
+                    lastExecuteAllTime = currTime + extraSleep;
+                    return;
+                }
+            }
+        } finally {
+            co.aikar.timings.MinecraftTimings.midTickChunkTasks.stopTiming();;
+        }
+    }
+    // Tuinity end - execute chunk tasks mid tick
+
     // Add env and gen to constructor
     public WorldServer(MinecraftServer minecraftserver, Executor executor, WorldNBTStorage worldnbtstorage, WorldData worlddata, DimensionManager dimensionmanager, GameProfilerFiller gameprofilerfiller, WorldLoadListener worldloadlistener, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen) {
         super(worlddata, dimensionmanager, (world, worldprovider) -> {
@@ -439,7 +489,7 @@ public class WorldServer extends World {
         }
         timings.scheduledBlocks.stopTiming(); // Spigot
 
-        this.getMinecraftServer().midTickLoadChunks(); // Paper
+        // Tuinity - replace logic
         gameprofilerfiller.exitEnter("raid");
         this.timings.raids.startTiming(); // Paper - timings
         this.persistentRaid.a();
@@ -452,7 +502,7 @@ public class WorldServer extends World {
         timings.doSounds.startTiming(); // Spigot
         this.ad();
         timings.doSounds.stopTiming(); // Spigot
-        this.getMinecraftServer().midTickLoadChunks(); // Paper
+        // Tuinity - replace logic
         this.ticking = false;
         gameprofilerfiller.exitEnter("entities");
         boolean flag3 = true || !this.players.isEmpty() || !this.getForceLoadedChunks().isEmpty(); // CraftBukkit - this prevents entity cleanup, other issues on servers with no players
@@ -493,7 +543,7 @@ public class WorldServer extends World {
             TimingHistory.entityTicks += this.globalEntityList.size(); // Paper
             int entitiesTicked = 0; // Paper
             while (objectiterator.hasNext()) {
-                if (entitiesTicked++ % 100 == 0) this.getMinecraftServer().midTickLoadChunks(); // Paper
+                // Tuinity - replace logic
                 Entity entity1 = (Entity) objectiterator.next(); // Tuinity - use loaded entity list
                 Entity entity2 = entity1.getVehicle();
 
@@ -524,6 +574,7 @@ public class WorldServer extends World {
                 gameprofilerfiller.enter("tick");
                 if (!entity1.dead && !(entity1 instanceof EntityComplexPart)) {
                     this.a(this::entityJoinedWorld, entity1);
+                    this.executeAllChunkTasks(); // Tuinity - exec chunk tasks during world tick
                 }
 
                 gameprofilerfiller.exit();
@@ -539,7 +590,7 @@ public class WorldServer extends World {
             timings.entityTick.stopTiming(); // Spigot
 
             this.tickingEntities = false;
-            this.getMinecraftServer().midTickLoadChunks(); // Paper
+            // Tuinity - replace logic
 
             try (co.aikar.timings.Timing ignored = this.timings.newEntities.startTiming()) { // Paper - timings
             while ((entity = (Entity) this.entitiesToAdd.poll()) != null) {
@@ -550,9 +601,9 @@ public class WorldServer extends World {
 
             gameprofilerfiller.exit();
             timings.tickEntities.stopTiming(); // Spigot
-            this.getMinecraftServer().midTickLoadChunks(); // Paper
+            // Tuinity - replace logic
             this.tickBlockEntities();
-            this.getMinecraftServer().midTickLoadChunks(); // Paper
+            // Tuinity - replace logic
         }
 
         gameprofilerfiller.exit();
