From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Wed, 9 Oct 2019 04:38:54 -0700
Subject: [PATCH] Lag compensate eating

When the server is lagging, players will wait longer when eating.
Change to also use a time check instead if it passes.

This can be controlled by config, and is enabled by default

diff --git a/src/main/java/ca/spottedleaf/concrete/config/ConcreteConfig.java b/src/main/java/ca/spottedleaf/concrete/config/ConcreteConfig.java
index 72ddf9ea70ad9460e9e85c109de1e7ccd09901b9..6798bcb73291cf82a64c63d4d6c09da7ac1c7463 100644
--- a/src/main/java/ca/spottedleaf/concrete/config/ConcreteConfig.java
+++ b/src/main/java/ca/spottedleaf/concrete/config/ConcreteConfig.java
@@ -115,6 +115,12 @@ public final class ConcreteConfig {
         optimizeChunkRangeCheck = ConcreteConfig.getBoolean("optimize-chunkrange-check", true);
     }
 
+    public static boolean lagCompensateEating;
+
+    private static void lagCompensateEating() {
+        lagCompensateEating = ConcreteConfig.getBoolean("lag-compensate-eating", true);
+    }
+
     public static final class WorldConnfig {
 
         public final String worldName;
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 80219f2df1bd5850468ec5212579e495fd2e0eb1..3c6c96745454c4758977bccda1bdc5e8ec44acce 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -113,7 +113,7 @@ public abstract class EntityLiving extends Entity {
     private int jumpTicks;
     private float bD;
     public ItemStack activeItem; // Paper - public
-    protected int bl;
+    protected int bl; protected final int getEatTimeTicks() { return this.bl; } protected final void setEatTimeTicks(int value) { this.bl = value; } /* Concrete - OBFHELPER */
     protected int bm;
     private BlockPosition bE;
     private DamageSource bF;
@@ -2842,6 +2842,8 @@ public abstract class EntityLiving extends Entity {
         return ((Byte) this.datawatcher.get(EntityLiving.ao) & 2) > 0 ? EnumHand.OFF_HAND : EnumHand.MAIN_HAND;
     }
 
+    protected long eatStartTime;
+    protected int totalEatTimeTicks;
     private void o() {
         if (this.isHandRaised()) {
             if (ItemStack.d(this.b(this.getRaisedHand()), this.activeItem)) {
@@ -2850,7 +2852,13 @@ public abstract class EntityLiving extends Entity {
                     this.b(this.activeItem, 5);
                 }
 
-                if (--this.bl == 0 && !this.world.isClientSide && !this.activeItem.m()) {
+                /* Concrete start - lag compensate eating */
+                // we add 2 to the expected time to avoid lag compensating when we don't need to
+                boolean shouldLagCompensate
+                        = ca.spottedleaf.concrete.config.ConcreteConfig.lagCompensateEating && this.activeItem.getItem().isFood() && this.eatStartTime != -1 && (System.nanoTime() - this.eatStartTime) > ((2 + this.totalEatTimeTicks) * 50 * (1000 * 1000));
+                if ((--this.bl == 0 || shouldLagCompensate) && !this.world.isClientSide && !this.activeItem.m()) {
+                    this.setEatTimeTicks(0);
+                    /* Concrete end - lag compensate eating */
                     this.q();
                 }
             } else {
@@ -2900,7 +2908,10 @@ public abstract class EntityLiving extends Entity {
 
         if (!itemstack.isEmpty() && !this.isHandRaised() || forceUpdate) { // Paper use override flag
             this.activeItem = itemstack;
-            this.bl = itemstack.k();
+            /* Concrete start - lag compensate eating */
+            this.bl = this.totalEatTimeTicks = itemstack.k();
+            this.eatStartTime = System.nanoTime();
+            /* Concrete end - lag compensate eating */
             if (!this.world.isClientSide) {
                 this.c(1, true);
                 this.c(2, enumhand == EnumHand.OFF_HAND);
@@ -2924,7 +2935,9 @@ public abstract class EntityLiving extends Entity {
                 }
             } else if (!this.isHandRaised() && !this.activeItem.isEmpty()) {
                 this.activeItem = ItemStack.a;
-                this.bl = 0;
+                this.bl = 0; /* Concrete - diff on change */
+                this.totalEatTimeTicks = 0; /* Concrete - lag compensate eating */
+                this.eatStartTime = -1L; /* Concrete - lag compensate eating */
             }
         }
 
@@ -3046,7 +3059,9 @@ public abstract class EntityLiving extends Entity {
         }
 
         this.activeItem = ItemStack.a;
-        this.bl = 0;
+        this.bl = 0; /* Concrete - diff on change */
+        this.totalEatTimeTicks = 0; /* Concrete - lag compensate eating */
+        this.eatStartTime = -1L; /* Concrete - lag compensate eating */
     }
 
     public boolean isBlocking() {
