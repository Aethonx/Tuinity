From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Mon, 4 Nov 2019 22:34:59 -0800
Subject: [PATCH] Optimize ChunkProiverServer's chunk level checking helper
 methods

These can be hot functions (i.e entity ticking and block ticking),
so inline where possible, and avoid the abstraction of the
Either class.

diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 428531f34ff66bd047124ebffd0be611b6d71341..de27ed72cf0c853cb19a908a1c0e242ab7147125 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -515,27 +515,39 @@ public class ChunkProviderServer extends IChunkProvider {
 
     @Override
     public boolean a(Entity entity) {
-        long i = ChunkCoordIntPair.pair(MathHelper.floor(entity.locX()) >> 4, MathHelper.floor(entity.locZ()) >> 4);
-
-        return this.a(i, PlayerChunk::b);
+        // Tuinity start - optimize is ticking ready type functions
+        // is entity ticking ready
+        PlayerChunk playerChunk = this.getChunk(ca.spottedleaf.tuinity.util.Util.getCoordinateKey(entity));
+        return playerChunk != null && playerChunk.isEntityTickingReady;
+        // Tuinity end - optimize is ticking ready type functions
     }
 
     @Override
     public boolean a(ChunkCoordIntPair chunkcoordintpair) {
-        return this.a(chunkcoordintpair.pair(), PlayerChunk::b);
+        // Tuinity start - optimize is ticking ready type functions
+        // is entity ticking ready
+        PlayerChunk playerChunk = this.getChunk(ca.spottedleaf.tuinity.util.Util.getCoordinateKey(chunkcoordintpair));
+        return playerChunk != null && playerChunk.isEntityTickingReady;
+        // Tuinity end - optimize is ticking ready type functions
     }
 
     @Override
     public boolean a(BlockPosition blockposition) {
-        long i = ChunkCoordIntPair.pair(blockposition.getX() >> 4, blockposition.getZ() >> 4);
-
-        return this.a(i, PlayerChunk::a);
+        // Tuinity start - optimize is ticking ready type functions
+        // is ticking ready
+        PlayerChunk playerChunk = this.getChunk(ca.spottedleaf.tuinity.util.Util.getCoordinateKey(blockposition));
+        return playerChunk != null && playerChunk.isTickingReady;
+        // Tuinity end - optimize is ticking ready type functions
     }
 
     public boolean b(Entity entity) {
-        long i = ChunkCoordIntPair.pair(MathHelper.floor(entity.locX()) >> 4, MathHelper.floor(entity.locZ()) >> 4);
-
-        return this.a(i, PlayerChunk::c);
+        // Tuinity start - optimize is ticking ready type functions
+        // is full chunk ready
+        if (Thread.currentThread() == this.serverThread) {
+            return this.getChunkAtIfLoadedMainThreadNoCache(ca.spottedleaf.tuinity.util.Util.getChunkCoordinate(entity.locX()), ca.spottedleaf.tuinity.util.Util.getChunkCoordinate(entity.locZ())) != null;
+        }
+        return this.getChunkAtIfLoadedImmediately(ca.spottedleaf.tuinity.util.Util.getChunkCoordinate(entity.locX()), ca.spottedleaf.tuinity.util.Util.getChunkCoordinate(entity.locZ())) != null;
+        // Tuinity end - optimize is ticking ready type functions
     }
 
     private boolean a(long i, Function<PlayerChunk, CompletableFuture<Either<Chunk, PlayerChunk.Failure>>> function) {
