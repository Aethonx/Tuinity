From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Sun, 3 Mar 2019 20:53:18 -0800
Subject: [PATCH] Multi-Threaded Server Ticking Vanilla

This patch is the vanilla server changes

diff --git a/src/main/java/ca/spottedleaf/tuinity/chunk/ChunkRegionManager.java b/src/main/java/ca/spottedleaf/tuinity/chunk/ChunkRegionManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..ab1e503d6baa81531d63703f66ed5aa26bd282f3
--- /dev/null
+++ b/src/main/java/ca/spottedleaf/tuinity/chunk/ChunkRegionManager.java
@@ -0,0 +1,70 @@
+package ca.spottedleaf.tuinity.chunk;
+
+import ca.spottedleaf.tuinity.util.TickSynchronizationPoint;
+import ca.spottedleaf.tuinity.util.TickThread;
+import ca.spottedleaf.concurrentutil.ConcurrentUtil;
+import ca.spottedleaf.concurrentutil.queue.MultiThreadedQueue;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import net.minecraft.server.Chunk;
+import net.minecraft.server.World;
+
+import java.lang.invoke.VarHandle;
+import java.util.function.Consumer;
+
+public class ChunkRegionManager {
+
+    public final Long2ObjectOpenHashMap<ChunkRegion> regions = new Long2ObjectOpenHashMap<>(2048);
+    public final World world;
+    public final TickSynchronizationPoint synchronizationPoint;
+
+    private final TickThread[] threads;
+
+    public ChunkRegionManager(final World world, final TickSynchronizationPoint synchronizationPoint, final TickThread[] threads) {
+        this.world = world;
+        this.synchronizationPoint = synchronizationPoint;
+        this.threads = threads;
+    }
+
+    public static long getChunkKey(final int x, final int z) {
+        return ((long)z << 32) | (x & 0xFFFFFFFFL);
+    }
+
+    public static int getChunkX(final long key) {
+        return (int)key;
+    }
+
+    public static int getChunkZ(final long key) {
+        return (int)(key >>> 32);
+    }
+
+    public void addChunk(final Chunk chunk) {
+        final long key = getChunkKey(chunk.getPos().x, chunk.getPos().z);
+        synchronized (this.regions) {
+
+        }
+    }
+
+    public static class ChunkRegion {
+
+        public final ChunkRegionManager regionManager;
+
+        /**
+         * Tasks that need to be executed after releasing the region.
+         */
+        private final MultiThreadedQueue<Consumer<ChunkRegion>> tasks = new MultiThreadedQueue<>();
+
+        static final int STATUS_OK         = 0; // mergeWith = null
+        static final int STATUS_TRYMERGE   = 1; // mergeWith = target region to merge with
+        static final int STATUS_MERGED     = 2; // mergeWith = region merged with
+
+        volatile int status;
+
+        ChunkRegion mergeWith;
+
+        static final VarHandle STATUS_HANDLE = ConcurrentUtil.getVarHandle(ChunkRegion.class, "status", int.class);
+
+        public ChunkRegion(final ChunkRegionManager regionManager) {
+            this.regionManager = regionManager;
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/ca/spottedleaf/tuinity/util/TickSynchronizationPoint.java b/src/main/java/ca/spottedleaf/tuinity/util/TickSynchronizationPoint.java
new file mode 100644
index 0000000000000000000000000000000000000000..3173ebb6f42a87df55c08559cd4105bf080f21e6
--- /dev/null
+++ b/src/main/java/ca/spottedleaf/tuinity/util/TickSynchronizationPoint.java
@@ -0,0 +1,40 @@
+package ca.spottedleaf.tuinity.util;
+
+import ca.spottedleaf.concurrentutil.misc.SynchronizationPoint;
+
+public final class TickSynchronizationPoint {
+
+    private final SynchronizationPoint lock;
+
+    public TickSynchronizationPoint(final TickThread[] threads) {
+        this.lock = new SynchronizationPoint(threads);
+    }
+
+    private static int getIdForCurrentThread() {
+        return ((TickThread)Thread.currentThread()).id;
+    }
+
+    public void start() {
+        this.lock.start(getIdForCurrentThread());
+    }
+
+    public void end() {
+        this.lock.end(getIdForCurrentThread());
+    }
+
+    public void enter() {
+        this.lock.enter(getIdForCurrentThread());
+    }
+
+    public void weakEnter() {
+        this.lock.weakEnter(getIdForCurrentThread());
+    }
+
+    public void enterAlone() {
+        this.lock.enterAlone(getIdForCurrentThread());
+    }
+
+    public void endAloneExecution() {
+        this.lock.endAloneExecution(getIdForCurrentThread());
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/ca/spottedleaf/tuinity/util/TickThread.java b/src/main/java/ca/spottedleaf/tuinity/util/TickThread.java
new file mode 100644
index 0000000000000000000000000000000000000000..7c4c2dd69908fff008370aba0b5f6389563f7f18
--- /dev/null
+++ b/src/main/java/ca/spottedleaf/tuinity/util/TickThread.java
@@ -0,0 +1,11 @@
+package ca.spottedleaf.tuinity.util;
+
+public final class TickThread extends Thread {
+
+    public final int id; /* We don't override getId as the spec requires that it be unique (with respect to all other threads) */
+
+    public TickThread(final Runnable run, final String name, final int id) {
+        super(run, name);
+        this.id = id;
+    }
+}
\ No newline at end of file
