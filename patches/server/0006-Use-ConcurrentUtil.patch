From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Sat, 5 Jan 2019 11:48:09 -0800
Subject: [PATCH] Use ConcurrentUtil


diff --git a/src/main/java/com/destroystokyo/paper/io/PrioritizedTaskQueue.java b/src/main/java/com/destroystokyo/paper/io/PrioritizedTaskQueue.java
index 78bd238f4ce2a95de5b6bcd455e5e2578e2b8ed8..8a789326885a8de7de595a9d4b13427f008d5bbf 100644
--- a/src/main/java/com/destroystokyo/paper/io/PrioritizedTaskQueue.java
+++ b/src/main/java/com/destroystokyo/paper/io/PrioritizedTaskQueue.java
@@ -1,5 +1,6 @@
 package com.destroystokyo.paper.io;
 
+import ca.spottedleaf.concurrentutil.queue.MultiThreadedQueue; // Tuinity - use concurrentutil
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -48,13 +49,13 @@ public class PrioritizedTaskQueue<T extends PrioritizedTaskQueue.PrioritizedTask
 
     private static final int TOTAL_PRIORITIES     = 6;
 
-    final ConcurrentLinkedQueue<T>[] queues = (ConcurrentLinkedQueue<T>[])new ConcurrentLinkedQueue[TOTAL_PRIORITIES];
+    final MultiThreadedQueue<T>[] queues = new MultiThreadedQueue[TOTAL_PRIORITIES]; // Tuinity - use concurrentutil
 
     private final AtomicBoolean shutdown = new AtomicBoolean();
 
     {
         for (int i = 0; i < TOTAL_PRIORITIES; ++i) {
-            this.queues[i] = new ConcurrentLinkedQueue<>();
+            this.queues[i] = new MultiThreadedQueue<>(); // Tuinity - use concurrentutil
         }
     }
 
@@ -73,9 +74,8 @@ public class PrioritizedTaskQueue<T extends PrioritizedTaskQueue.PrioritizedTask
      */
     public void add(final T task) throws IllegalStateException {
         task.onQueue(this);
-        this.queues[task.getPriority()].add(task);
-        if (this.shutdown.get()) {
-            // note: we're not actually sure at this point if our task will go through
+        if (!this.queues[task.getPriority()].add(task)) { // Tuinity - use concurrentutil
+            // note: we're not actually sure at this point if our task will go through // Tuinity - we are certain now
             throw new IllegalStateException("Queue has shutdown, refusing to execute task " + IOUtil.genericToString(task));
         }
     }
@@ -86,7 +86,7 @@ public class PrioritizedTaskQueue<T extends PrioritizedTaskQueue.PrioritizedTask
     public T poll() {
         T task;
         for (int i = 0; i < TOTAL_PRIORITIES; ++i) {
-            final ConcurrentLinkedQueue<T> queue = this.queues[i];
+            final MultiThreadedQueue<T> queue = this.queues[i]; // Tuinity - use concurrentutil
 
             while ((task = queue.poll()) != null) {
                 final int prevPriority = task.tryComplete(i);
@@ -109,7 +109,7 @@ public class PrioritizedTaskQueue<T extends PrioritizedTaskQueue.PrioritizedTask
      */
     public boolean hasTasks() {
         for (int i = 0; i < TOTAL_PRIORITIES; ++i) {
-            final ConcurrentLinkedQueue<T> queue = this.queues[i];
+            final MultiThreadedQueue<T> queue = this.queues[i]; // Tuinity - use concurrentutil
 
             if (queue.peek() != null) {
                 return true;
@@ -130,6 +130,12 @@ public class PrioritizedTaskQueue<T extends PrioritizedTaskQueue.PrioritizedTask
      * @return {@code true} if the queue was shutdown, {@code false} if it has shut down already
      */
     public boolean shutdown() {
+        // Tuinity start - use concurrentutil
+        for (int i = 0; i < TOTAL_PRIORITIES; ++i) {
+            final MultiThreadedQueue<T> queue = this.queues[i];
+            queue.preventAdds();
+        }
+        // Tuinity end - use concurrentutil
         return this.shutdown.getAndSet(false);
     }
 
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index ed763a61f2ad8bb5318835abd2db3e89cbab5c12..4ab56dbede11a88c2dd3c4501a9e28b7459abc53 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -44,7 +44,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
     private static final Logger LOGGER = LogManager.getLogger();
     private static final Pattern i = Pattern.compile("^[a-fA-F0-9]{40}$");
-    private final java.util.Queue<ServerCommand> serverCommandQueue = new java.util.concurrent.ConcurrentLinkedQueue<ServerCommand>(); // Paper - use a proper queue
+    private final java.util.Queue<ServerCommand> serverCommandQueue = new ca.spottedleaf.concurrentutil.queue.MultiThreadedQueue<>(); // Paper - use a proper queue // Tuinity - Use a better queue
     private RemoteStatusListener remoteStatusListener;
     public final RemoteControlCommandListener remoteControlCommandListener;
     private RemoteControlListener remoteControlListener;
diff --git a/src/main/java/net/minecraft/server/IAsyncTaskHandler.java b/src/main/java/net/minecraft/server/IAsyncTaskHandler.java
index cfe43e882e524b6ab3d9702e81269c97e6b75eba..e7a58989dd4842a07a3168dccc27788d49476cff 100644
--- a/src/main/java/net/minecraft/server/IAsyncTaskHandler.java
+++ b/src/main/java/net/minecraft/server/IAsyncTaskHandler.java
@@ -13,7 +13,7 @@ public abstract class IAsyncTaskHandler<R extends Runnable> implements Mailbox<R
 
     private final String b;
     private static final Logger LOGGER = LogManager.getLogger();
-    private final Queue<R> d = Queues.newConcurrentLinkedQueue();
+    private final ca.spottedleaf.concurrentutil.queue.MultiThreadedQueue<R> d = new ca.spottedleaf.concurrentutil.queue.MultiThreadedQueue<>(); // Tuinity - Use a better queue
     private int e;
 
     protected IAsyncTaskHandler(String s) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 0a52800caa8ea8faa1739ee4d3d47e5e344ade6f..af004ab23f9b5bfbfa0c88c952611d9e7dda3d7c 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -166,7 +166,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     public org.bukkit.command.RemoteConsoleCommandSender remoteConsole;
     //public ConsoleReader reader; // Paper
     public static int currentTick = 0; // Paper - Further improve tick loop
-    public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+    public final java.util.Queue<Runnable> processQueue = new ca.spottedleaf.concurrentutil.queue.MultiThreadedQueue<>(); // Tuinity - Use CLL
     public int autosavePeriod;
     public boolean serverAutoSave = false; // Paper
     public File bukkitDataPackFolder;
@@ -1194,9 +1194,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         // CraftBukkit start
         // Run tasks that are waiting on processing
         MinecraftTimings.processQueueTimer.startTiming(); // Spigot
-        while (!processQueue.isEmpty()) {
-            processQueue.remove().run();
-        }
+        ((ca.spottedleaf.concurrentutil.queue.MultiThreadedQueue<Runnable>)processQueue).drain(Runnable::run); // Tuinity - Use efficient drain method
         MinecraftTimings.processQueueTimer.stopTiming(); // Spigot
 
         MinecraftTimings.timeUpdateTimer.startTiming(); // Spigot // Paper
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 96a785af27e1924b0cc1959254d4ae3cdd0385a1..211a6d7206788cbac80f2117d106f39ac3ef6dd5 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -42,7 +42,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
         return new DefaultEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Client IO #%d").setDaemon(true).build());
     });
     private final EnumProtocolDirection h;
-    private final Queue<NetworkManager.QueuedPacket> packetQueue = Queues.newConcurrentLinkedQueue(); private final Queue<NetworkManager.QueuedPacket> getPacketQueue() { return this.packetQueue; } // Paper - OBFHELPER
+    private final Queue<NetworkManager.QueuedPacket> packetQueue = new ca.spottedleaf.concurrentutil.queue.MultiThreadedQueue<>(); private final Queue<NetworkManager.QueuedPacket> getPacketQueue() { return this.packetQueue; } // Paper - OBFHELPER // Tuinity - Use CLL
     public Channel channel;
     public SocketAddress socketAddress; public void setSpoofedRemoteAddress(SocketAddress address) { this.socketAddress = address; } // Paper - OBFHELPER
     // Spigot Start
diff --git a/src/main/java/net/minecraft/server/ThreadedMailbox.java b/src/main/java/net/minecraft/server/ThreadedMailbox.java
index 2dd3f003accebb05f3d27800867635b01af6755b..4942cc07c14eec8d7d8223d8f18a3951bc9d6fa7 100644
--- a/src/main/java/net/minecraft/server/ThreadedMailbox.java
+++ b/src/main/java/net/minecraft/server/ThreadedMailbox.java
@@ -17,7 +17,7 @@ public class ThreadedMailbox<T> implements Mailbox<T>, AutoCloseable, Runnable {
     private final String e;
 
     public static ThreadedMailbox<Runnable> a(Executor executor, String s) {
-        return new ThreadedMailbox<>(new PairedQueue.c<>(new ConcurrentLinkedQueue()), executor, s);
+        return new ThreadedMailbox<>(new PairedQueue.c<>(new ca.spottedleaf.concurrentutil.queue.MultiThreadedQueue<>()), executor, s); // Tuinity - use concurrentutil
     }
 
     public ThreadedMailbox(PairedQueue<? super T, ? extends Runnable> pairedqueue, Executor executor, String s) {
